package main;

import java_cup.runtime.*;
import main.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;

//class AnalisadorSintatico

parser code {:
  protected Lexer lexer;
:}

init with {:
  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);
:};

scan with {: return lexer.next_token(); :};

terminal	Integer	LITERAL_INTEIRO;
//terminal	Float	LITERAL_FLUTUANTE;
terminal	String	IDENTIFICADOR;
//terminal	String	COMENTARIO;
//Oh deus. E longo mais e mais facil debugar.
terminal			PONTOVIRGULA;
terminal			PONTO;
terminal			VIRGULA;
terminal			IGUAL;
terminal			PARENT_ESQ;
terminal			PARENT_DIR;
terminal			CURLY_ESQ;
terminal			CURLY_DIR;
terminal			COLCHE_ESQ;
terminal			COLCHE_DIR;
terminal			K_CLASS;
terminal			K_PUBLIC;
terminal			K_EXTENDS;
terminal			K_STATIC;
terminal			K_WHILE;
terminal			K_IF;
terminal			K_ELSE;
terminal			K_RETURN;
terminal			K_THIS;
terminal			K_NEW;
terminal			K_MAIN;
terminal			K_LENGTH;
terminal			K_PRINT;
//terminal			OP_OR;
terminal			OP_AND;
//terminal			OP_EQ;
//terminal			OP_DIF;
terminal			OP_LT;
//terminal			OP_LET;
//terminal			OP_GT;
//terminal			OP_GET;
terminal			T_VOID;
terminal			T_INT;
terminal			T_BOOLEAN;
terminal			T_STRING;
terminal			B_TRUE;
terminal			B_FALSE;
terminal			A_PLUS;
terminal			A_MINUS;
terminal			A_MULT;
//terminal			A_DIV;
//terminal			A_MOD;
terminal			A_FAT;


non terminal String	Goal,MainClass,ClassDeclaration,VarDeclaration,MethodDeclaration,Type,Statement,Expression,Identifier;
//novos
non terminal String ExprExtra,ExprColchet,JavaMethods,MethodStatement,SubExprFuncVar,ExprFuncVar,ExprOp,SubStatement,MethodVarDecl,MethodInputExtr,MethodInpDecl,Extend,ClassVariables,ClassMethods;

precedence left A_MULT,A_FAT,A_MINUS,A_PLUS;
precedence right COLCHE_ESQ,PONTO,OP_AND,OP_LT;

Goal				::=	MainClass ClassDeclaration;
MainClass			::=	K_CLASS Identifier CURLY_ESQ K_PUBLIC K_STATIC T_VOID K_MAIN PARENT_ESQ T_STRING COLCHE_ESQ COLCHE_DIR Identifier PARENT_DIR CURLY_ESQ Statement CURLY_DIR CURLY_DIR;
ClassDeclaration	::=	ClassDeclaration K_CLASS Identifier Extend CURLY_ESQ ClassVariables ClassMethods CURLY_DIR 
					|	;
Extend				::=	K_EXTENDS Identifier
					|	;
ClassVariables		::=	VarDeclaration ClassVariables
					|	;
ClassMethods		::= MethodDeclaration ClassMethods
					|	;
VarDeclaration		::=	Type Identifier PONTOVIRGULA;
MethodDeclaration	::=	K_PUBLIC Type Identifier PARENT_ESQ MethodInpDecl PARENT_DIR CURLY_ESQ MethodVarDecl MethodStatement K_RETURN Expression PONTOVIRGULA CURLY_DIR;
MethodInpDecl		::=	Type Identifier MethodInputExtr
					|	;
MethodInputExtr		::= VIRGULA Type Identifier MethodInputExtr
					|	;
MethodVarDecl		::= MethodVarDecl VarDeclaration
					|	;
MethodStatement		::= Statement MethodStatement
					|	;
Type				::=	T_INT COLCHE_ESQ COLCHE_DIR
					|	T_BOOLEAN
					|	T_INT
					|	Identifier;
Statement			::=	CURLY_ESQ SubStatement CURLY_DIR
					|	K_IF PARENT_ESQ Expression PARENT_DIR Statement K_ELSE Statement
					|	K_WHILE PARENT_ESQ Expression PARENT_DIR Statement
					|	K_PRINT PARENT_ESQ Expression PARENT_DIR PONTOVIRGULA
					|	Identifier IGUAL Expression PONTOVIRGULA
					|	Identifier COLCHE_ESQ Expression COLCHE_DIR IGUAL Expression PONTOVIRGULA;
SubStatement		::=	Statement SubStatement
					|	;
Expression			::=	Expression ExprExtra
					|	LITERAL_INTEIRO
					|	B_TRUE
					|	B_FALSE
					|	Identifier
					|	K_THIS
					|	K_NEW T_INT ExprColchet
					|	K_NEW Identifier PARENT_ESQ PARENT_DIR
					|	A_FAT Expression
					|	PARENT_ESQ Expression PARENT_DIR;
ExprExtra			::=	ExprOp Expression
					|	ExprColchet
					|	PONTO JavaMethods;
ExprColchet			::=	COLCHE_ESQ Expression COLCHE_DIR;
JavaMethods			::= K_LENGTH
					| 	Identifier PARENT_ESQ ExprFuncVar PARENT_DIR;
ExprFuncVar			::=	Expression SubExprFuncVar
					|	;
SubExprFuncVar		::=	VIRGULA Expression SubExprFuncVar
					|	;
ExprOp				::=	OP_AND
					|	OP_LT
					|	A_PLUS
					|	A_MINUS
					|	A_MULT;
Identifier			::=	IDENTIFICADOR;