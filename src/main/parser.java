
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Oct 18 19:05:27 BRT 2015
//----------------------------------------------------

package main;

import java_cup.runtime.*;
import main.Lexer;
import java.io.IOException;
import java.io.File;
import java.io.FileInputStream;
import java.util.List;
import java.util.LinkedList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Oct 18 19:05:27 BRT 2015
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\004\000\002\003" +
    "\023\000\002\004\012\000\002\004\002\000\002\026\004" +
    "\000\002\026\002\000\002\027\004\000\002\027\002\000" +
    "\002\030\004\000\002\030\002\000\002\005\005\000\002" +
    "\006\017\000\002\025\005\000\002\025\002\000\002\024" +
    "\006\000\002\024\002\000\002\023\004\000\002\023\002" +
    "\000\002\016\004\000\002\016\002\000\002\007\005\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\010\005\000\002\010\011\000\002\010\007\000\002\010" +
    "\007\000\002\010\006\000\002\010\011\000\002\022\004" +
    "\000\002\022\002\000\002\011\004\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\011\003\000\002" +
    "\011\003\000\002\011\005\000\002\011\006\000\002\011" +
    "\004\000\002\011\005\000\002\013\004\000\002\013\003" +
    "\000\002\013\004\000\002\014\005\000\002\015\003\000" +
    "\002\015\006\000\002\020\004\000\002\020\002\000\002" +
    "\017\005\000\002\017\002\000\002\021\003\000\002\021" +
    "\003\000\002\021\003\000\002\021\003\000\002\021\003" +
    "\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\004\022\006\001\002\000\004\002\216\001" +
    "\002\000\006\002\ufffd\022\ufffd\001\002\000\004\006\007" +
    "\001\002\000\042\006\uffc7\010\uffc7\011\uffc7\012\uffc7\013" +
    "\uffc7\014\uffc7\015\uffc7\016\uffc7\020\uffc7\021\uffc7\024\uffc7" +
    "\040\uffc7\043\uffc7\055\uffc7\056\uffc7\057\uffc7\001\002\000" +
    "\004\016\011\001\002\000\004\023\012\001\002\000\004" +
    "\025\013\001\002\000\004\047\014\001\002\000\004\034" +
    "\015\001\002\000\004\014\016\001\002\000\004\052\017" +
    "\001\002\000\004\020\020\001\002\000\004\021\021\001" +
    "\002\000\004\006\007\001\002\000\004\015\023\001\002" +
    "\000\004\016\024\001\002\000\014\006\007\016\027\026" +
    "\030\027\031\036\025\001\002\000\004\014\134\001\002" +
    "\000\004\017\132\001\002\000\016\006\007\016\027\017" +
    "\uffe1\026\030\027\031\036\025\001\002\000\004\014\122" +
    "\001\002\000\004\014\114\001\002\000\006\013\033\020" +
    "\034\001\002\000\022\004\036\006\007\014\037\032\044" +
    "\033\045\053\035\054\043\062\040\001\002\000\022\004" +
    "\036\006\007\014\037\032\044\033\045\053\035\054\043" +
    "\062\040\001\002\000\030\010\uffde\011\uffde\012\uffde\015" +
    "\uffde\020\uffde\021\uffde\040\uffde\043\uffde\055\uffde\056\uffde" +
    "\057\uffde\001\002\000\030\010\uffdf\011\uffdf\012\uffdf\015" +
    "\uffdf\020\uffdf\021\uffdf\040\uffdf\043\uffdf\055\uffdf\056\uffdf" +
    "\057\uffdf\001\002\000\022\004\036\006\007\014\037\032" +
    "\044\033\045\053\035\054\043\062\040\001\002\000\022" +
    "\004\036\006\007\014\037\032\044\033\045\053\035\054" +
    "\043\062\040\001\002\000\030\010\uffdc\011\uffdc\012\uffdc" +
    "\015\uffdc\020\uffdc\021\uffdc\040\uffdc\043\uffdc\055\uffdc\056" +
    "\uffdc\057\uffdc\001\002\000\022\011\061\020\053\021\103" +
    "\040\060\043\064\055\066\056\057\057\065\001\002\000" +
    "\030\010\uffdd\011\uffdd\012\uffdd\015\uffdd\020\uffdd\021\uffdd" +
    "\040\uffdd\043\uffdd\055\uffdd\056\uffdd\057\uffdd\001\002\000" +
    "\030\010\uffdb\011\uffdb\012\uffdb\015\uffdb\020\uffdb\021\uffdb" +
    "\040\uffdb\043\uffdb\055\uffdb\056\uffdb\057\uffdb\001\002\000" +
    "\006\006\007\050\046\001\002\000\004\020\053\001\002" +
    "\000\004\014\050\001\002\000\004\015\051\001\002\000" +
    "\030\010\uffd9\011\uffd9\012\uffd9\015\uffd9\020\uffd9\021\uffd9" +
    "\040\uffd9\043\uffd9\055\uffd9\056\uffd9\057\uffd9\001\002\000" +
    "\030\010\uffda\011\uffda\012\uffda\015\uffda\020\uffda\021\uffda" +
    "\040\uffda\043\uffda\055\uffda\056\uffda\057\uffda\001\002\000" +
    "\022\004\036\006\007\014\037\032\044\033\045\053\035" +
    "\054\043\062\040\001\002\000\022\011\061\020\053\021" +
    "\056\040\060\043\064\055\066\056\057\057\065\001\002" +
    "\000\030\010\uffe0\011\uffe0\012\uffe0\015\uffe0\020\uffe0\021" +
    "\uffe0\040\uffe0\043\uffe0\055\uffe0\056\uffe0\057\uffe0\001\002" +
    "\000\030\010\uffd3\011\uffd3\012\uffd3\015\uffd3\020\uffd3\021" +
    "\uffd3\040\uffd3\043\uffd3\055\uffd3\056\uffd3\057\uffd3\001\002" +
    "\000\022\004\uffc9\006\uffc9\014\uffc9\032\uffc9\033\uffc9\053" +
    "\uffc9\054\uffc9\062\uffc9\001\002\000\022\004\uffcc\006\uffcc" +
    "\014\uffcc\032\uffcc\033\uffcc\053\uffcc\054\uffcc\062\uffcc\001" +
    "\002\000\006\006\007\035\070\001\002\000\022\004\036" +
    "\006\007\014\037\032\044\033\045\053\035\054\043\062" +
    "\040\001\002\000\030\010\uffd5\011\uffd5\012\uffd5\015\uffd5" +
    "\020\uffd5\021\uffd5\040\uffd5\043\uffd5\055\uffd5\056\uffd5\057" +
    "\uffd5\001\002\000\022\004\uffcb\006\uffcb\014\uffcb\032\uffcb" +
    "\033\uffcb\053\uffcb\054\uffcb\062\uffcb\001\002\000\022\004" +
    "\uffc8\006\uffc8\014\uffc8\032\uffc8\033\uffc8\053\uffc8\054\uffc8" +
    "\062\uffc8\001\002\000\022\004\uffca\006\uffca\014\uffca\032" +
    "\uffca\033\uffca\053\uffca\054\uffca\062\uffca\001\002\000\030" +
    "\010\uffd6\011\061\012\uffd6\015\uffd6\020\053\021\uffd6\040" +
    "\060\043\064\055\066\056\057\057\065\001\002\000\030" +
    "\010\uffd2\011\uffd2\012\uffd2\015\uffd2\020\uffd2\021\uffd2\040" +
    "\uffd2\043\uffd2\055\uffd2\056\uffd2\057\uffd2\001\002\000\030" +
    "\010\uffd4\011\uffd4\012\uffd4\015\uffd4\020\uffd4\021\uffd4\040" +
    "\uffd4\043\uffd4\055\uffd4\056\uffd4\057\uffd4\001\002\000\004" +
    "\014\073\001\002\000\024\004\036\006\007\014\037\015" +
    "\uffcf\032\044\033\045\053\035\054\043\062\040\001\002" +
    "\000\024\011\061\012\100\015\uffcd\020\053\040\060\043" +
    "\064\055\066\056\057\057\065\001\002\000\004\015\076" +
    "\001\002\000\030\010\uffd1\011\uffd1\012\uffd1\015\uffd1\020" +
    "\uffd1\021\uffd1\040\uffd1\043\uffd1\055\uffd1\056\uffd1\057\uffd1" +
    "\001\002\000\004\015\uffd0\001\002\000\022\004\036\006" +
    "\007\014\037\032\044\033\045\053\035\054\043\062\040" +
    "\001\002\000\024\011\061\012\100\015\uffcd\020\053\040" +
    "\060\043\064\055\066\056\057\057\065\001\002\000\004" +
    "\015\uffce\001\002\000\004\013\104\001\002\000\022\004" +
    "\036\006\007\014\037\032\044\033\045\053\035\054\043" +
    "\062\040\001\002\000\022\010\106\011\061\020\053\040" +
    "\060\043\064\055\066\056\057\057\065\001\002\000\022" +
    "\006\uffe3\016\uffe3\017\uffe3\026\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\036\uffe3\001\002\000\030\010\uffd8\011\061\012\uffd8" +
    "\015\uffd8\020\053\021\uffd8\040\060\043\064\055\uffd8\056" +
    "\uffd8\057\uffd8\001\002\000\022\011\061\015\111\020\053" +
    "\040\060\043\064\055\066\056\057\057\065\001\002\000" +
    "\030\010\uffd7\011\uffd7\012\uffd7\015\uffd7\020\uffd7\021\uffd7" +
    "\040\uffd7\043\uffd7\055\uffd7\056\uffd7\057\uffd7\001\002\000" +
    "\022\010\113\011\061\020\053\040\060\043\064\055\066" +
    "\056\057\057\065\001\002\000\022\006\uffe4\016\uffe4\017" +
    "\uffe4\026\uffe4\027\uffe4\030\uffe4\031\uffe4\036\uffe4\001\002" +
    "\000\022\004\036\006\007\014\037\032\044\033\045\053" +
    "\035\054\043\062\040\001\002\000\022\011\061\015\116" +
    "\020\053\040\060\043\064\055\066\056\057\057\065\001" +
    "\002\000\014\006\007\016\027\026\030\027\031\036\025" +
    "\001\002\000\004\030\120\001\002\000\014\006\007\016" +
    "\027\026\030\027\031\036\025\001\002\000\022\006\uffe7" +
    "\016\uffe7\017\uffe7\026\uffe7\027\uffe7\030\uffe7\031\uffe7\036" +
    "\uffe7\001\002\000\022\004\036\006\007\014\037\032\044" +
    "\033\045\053\035\054\043\062\040\001\002\000\022\011" +
    "\061\015\124\020\053\040\060\043\064\055\066\056\057" +
    "\057\065\001\002\000\014\006\007\016\027\026\030\027" +
    "\031\036\025\001\002\000\022\006\uffe6\016\uffe6\017\uffe6" +
    "\026\uffe6\027\uffe6\030\uffe6\031\uffe6\036\uffe6\001\002\000" +
    "\004\017\131\001\002\000\016\006\007\016\027\017\uffe1" +
    "\026\030\027\031\036\025\001\002\000\004\017\uffe2\001" +
    "\002\000\022\006\uffe8\016\uffe8\017\uffe8\026\uffe8\027\uffe8" +
    "\030\uffe8\031\uffe8\036\uffe8\001\002\000\004\017\133\001" +
    "\002\000\006\002\uffff\022\uffff\001\002\000\022\004\036" +
    "\006\007\014\037\032\044\033\045\053\035\054\043\062" +
    "\040\001\002\000\022\011\061\015\136\020\053\040\060" +
    "\043\064\055\066\056\057\057\065\001\002\000\004\010" +
    "\137\001\002\000\022\006\uffe5\016\uffe5\017\uffe5\026\uffe5" +
    "\027\uffe5\030\uffe5\031\uffe5\036\uffe5\001\002\000\006\002" +
    "\000\022\141\001\002\000\004\006\007\001\002\000\006" +
    "\016\ufffb\024\143\001\002\000\004\006\007\001\002\000" +
    "\004\016\145\001\002\000\014\006\007\017\ufff9\023\ufff9" +
    "\050\152\051\147\001\002\000\004\006\007\001\002\000" +
    "\004\006\uffeb\001\002\000\014\006\007\017\ufff9\023\ufff9" +
    "\050\152\051\147\001\002\000\006\017\ufff7\023\157\001" +
    "\002\000\006\006\uffea\020\154\001\002\000\004\006\uffe9" +
    "\001\002\000\004\021\155\001\002\000\004\006\uffec\001" +
    "\002\000\006\017\ufff7\023\157\001\002\000\010\006\007" +
    "\050\152\051\147\001\002\000\004\017\161\001\002\000" +
    "\006\002\ufffe\022\ufffe\001\002\000\004\006\007\001\002" +
    "\000\004\014\164\001\002\000\012\006\007\015\ufff3\050" +
    "\152\051\147\001\002\000\004\006\007\001\002\000\004" +
    "\015\167\001\002\000\004\016\170\001\002\000\022\006" +
    "\uffef\016\uffef\026\uffef\027\uffef\031\uffef\036\uffef\050\uffef" +
    "\051\uffef\001\002\000\022\006\007\016\027\026\030\027" +
    "\031\031\uffed\036\025\050\152\051\147\001\002\000\022" +
    "\006\ufff0\016\ufff0\026\ufff0\027\ufff0\031\ufff0\036\ufff0\050" +
    "\ufff0\051\ufff0\001\002\000\010\006\uffe9\013\033\020\034" +
    "\001\002\000\004\031\177\001\002\000\016\006\007\016" +
    "\027\026\030\027\031\031\uffed\036\025\001\002\000\004" +
    "\031\uffee\001\002\000\022\004\036\006\007\014\037\032" +
    "\044\033\045\053\035\054\043\062\040\001\002\000\022" +
    "\010\201\011\061\020\053\040\060\043\064\055\066\056" +
    "\057\057\065\001\002\000\004\017\202\001\002\000\006" +
    "\017\ufff5\023\ufff5\001\002\000\006\012\204\015\ufff1\001" +
    "\002\000\010\006\007\050\152\051\147\001\002\000\004" +
    "\015\ufff4\001\002\000\004\006\007\001\002\000\006\012" +
    "\204\015\ufff1\001\002\000\004\015\ufff2\001\002\000\004" +
    "\017\ufff8\001\002\000\006\017\ufffa\023\ufffa\001\002\000" +
    "\004\010\214\001\002\000\026\006\ufff6\016\ufff6\017\ufff6" +
    "\023\ufff6\026\ufff6\027\ufff6\031\ufff6\036\ufff6\050\ufff6\051" +
    "\ufff6\001\002\000\004\016\ufffc\001\002\000\004\002\001" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\214\000\006\002\003\003\004\001\001\000\002\001" +
    "\001\000\004\004\137\001\001\000\004\012\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\021\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\025\012\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\126\012\031\022\125" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\011\111\012\040\001\001\000\006\011\041" +
    "\012\040\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\107\012\040\001\001\000\006\011\106\012\040" +
    "\001\001\000\002\001\001\000\010\013\054\014\062\021" +
    "\061\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\046\001\001\000\004\014\051\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\053\012\040\001\001\000\010\013\054\014" +
    "\062\021\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\071\015" +
    "\070\001\001\000\006\011\066\012\040\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\013\054\014\062\021\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\011" +
    "\073\012\040\020\074\001\001\000\012\013\054\014\062" +
    "\017\076\021\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\100\012\040\001\001" +
    "\000\012\013\054\014\062\017\101\021\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\011\104\012\040" +
    "\001\001\000\010\013\054\014\062\021\061\001\001\000" +
    "\002\001\001\000\010\013\054\014\062\021\061\001\001" +
    "\000\010\013\054\014\062\021\061\001\001\000\002\001" +
    "\001\000\010\013\054\014\062\021\061\001\001\000\002" +
    "\001\001\000\006\011\114\012\040\001\001\000\010\013" +
    "\054\014\062\021\061\001\001\000\006\010\116\012\031" +
    "\001\001\000\002\001\001\000\006\010\120\012\031\001" +
    "\001\000\002\001\001\000\006\011\122\012\040\001\001" +
    "\000\010\013\054\014\062\021\061\001\001\000\006\010" +
    "\124\012\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\010\126\012\031\022\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\011\134\012\040\001\001\000\010\013\054\014" +
    "\062\021\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\141\001\001\000\004\026" +
    "\143\001\001\000\004\012\214\001\001\000\002\001\001" +
    "\000\012\005\147\007\145\012\152\027\150\001\001\000" +
    "\004\012\212\001\001\000\002\001\001\000\012\005\147" +
    "\007\145\012\152\027\211\001\001\000\006\006\155\030" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\006\155\030\210\001" +
    "\001\000\006\007\161\012\152\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\162\001\001\000\002\001" +
    "\001\000\010\007\164\012\152\025\165\001\001\000\004" +
    "\012\202\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\023\170\001\001\000\014\005\171\007\145\010\174" +
    "\012\172\016\173\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\174\012\031\016\175" +
    "\001\001\000\002\001\001\000\006\011\177\012\040\001" +
    "\001\000\010\013\054\014\062\021\061\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\024\204\001\001\000" +
    "\006\007\205\012\152\001\001\000\002\001\001\000\004" +
    "\012\206\001\001\000\004\024\207\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserCup$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserCup$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserCup$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

  ComplexSymbolFactory f = new ComplexSymbolFactory();
  symbolFactory = f;
  File file = new File("input.txt");
  FileInputStream fis = null;
  try {
    fis = new FileInputStream(file);
  } catch (IOException e) {
    e.printStackTrace();
  } 
  lexer = new Lexer(f,fis);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.next_token(); 
    }


  protected Lexer lexer;

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ParserCup$actions {
  private final parser parser;

  /** Constructor */
  CUP$ParserCup$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ParserCup$do_action(
    int                        CUP$ParserCup$act_num,
    java_cup.runtime.lr_parser CUP$ParserCup$parser,
    java.util.Stack            CUP$ParserCup$stack,
    int                        CUP$ParserCup$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserCup$result;

      /* select the action based on the action number */
      switch (CUP$ParserCup$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Identifier ::= IDENTIFICADOR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = (String) e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Identifier",8, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ExprOp ::= A_MULT 
            {
              String RESULT =null;
		 RESULT = "*";
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprOp",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ExprOp ::= A_MINUS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprOp",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ExprOp ::= A_PLUS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprOp",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ExprOp ::= OP_LT 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprOp",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ExprOp ::= OP_AND 
            {
              String RESULT =null;
		 RESULT = "&&"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprOp",15, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SubExprFuncVar ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("SubExprFuncVar",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SubExprFuncVar ::= VIRGULA Expression SubExprFuncVar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = ","+e+" "+f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("SubExprFuncVar",13, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ExprFuncVar ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprFuncVar",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ExprFuncVar ::= Expression SubExprFuncVar 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e+" "+f; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprFuncVar",14, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // JavaMethods ::= Identifier PARENT_ESQ ExprFuncVar PARENT_DIR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = i+"("+e+")"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("JavaMethods",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // JavaMethods ::= K_LENGTH 
            {
              String RESULT =null;
		 RESULT = "length"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("JavaMethods",11, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ExprColchet ::= COLCHE_ESQ Expression COLCHE_DIR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = "["+e+"]"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprColchet",10, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ExprExtra ::= PONTO JavaMethods 
            {
              String RESULT =null;
		int jleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int jright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String j = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = "."+j; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprExtra",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ExprExtra ::= ExprColchet 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprExtra",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // ExprExtra ::= ExprOp Expression 
            {
              String RESULT =null;
		int oleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String o = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = o+" "+e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ExprExtra",9, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Expression ::= PARENT_ESQ Expression PARENT_DIR 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = "("+e+")"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Expression ::= OP_NOT Expression 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = "!"+e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Expression ::= K_NEW Identifier PARENT_ESQ PARENT_DIR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = "new "+i+"()"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Expression ::= K_NEW T_INT ExprColchet 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = "new int"+e; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= K_THIS 
            {
              String RESULT =null;
		 RESULT = "this"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Expression ::= B_FALSE 
            {
              String RESULT =null;
		 RESULT = "FALSE"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Expression ::= B_TRUE 
            {
              String RESULT =null;
		 RESULT = "TRUE"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Expression ::= LITERAL_INTEIRO 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = l; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Expression ::= Expression ExprExtra 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = e+" "+x; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Expression",7, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SubStatement ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("SubStatement",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SubStatement ::= Statement SubStatement 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int saleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int saright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String sa = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s+" "+sa; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("SubStatement",16, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Statement ::= Identifier COLCHE_ESQ Expression COLCHE_DIR IGUAL Expression PONTOVIRGULA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = i+"["+e+"]= "+d+";\n"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Statement ::= Identifier IGUAL Expression PONTOVIRGULA 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = i+" ="+e+";\n"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= K_PRINT PARENT_ESQ Expression PARENT_DIR PONTOVIRGULA 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = "System.out.print("+e+");\n"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= K_WHILE PARENT_ESQ Expression PARENT_DIR Statement 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = "while("+e+")"+s; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= K_IF PARENT_ESQ Expression PARENT_DIR Statement K_ELSE Statement 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String s1 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String s2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = "if("+e+") "+s1+" else "+s2; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-6)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= CURLY_ESQ SubStatement CURLY_DIR 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = "{"+s+"}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Statement",6, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Type ::= Identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = i; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Type ::= T_INT 
            {
              String RESULT =null;
		 RESULT = "int"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Type ::= T_BOOLEAN 
            {
              String RESULT =null;
		 RESULT = "boolean"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Type ::= T_INT COLCHE_ESQ COLCHE_DIR 
            {
              String RESULT =null;
		 RESULT = "int[]"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MethodStatement ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodStatement",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // MethodStatement ::= Statement MethodStatement 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = s+m; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodStatement",12, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // MethodVarDecl ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // MethodVarDecl ::= MethodVarDecl VarDeclaration 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = m+v; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodVarDecl",17, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // MethodInputExtr ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodInputExtr",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // MethodInputExtr ::= VIRGULA Type Identifier MethodInputExtr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = ","+t+" "+i+" "+m; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodInputExtr",18, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-3)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // MethodInpDecl ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodInpDecl",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // MethodInpDecl ::= Type Identifier MethodInputExtr 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = t+" "+i+" "+m; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodInpDecl",19, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // MethodDeclaration ::= K_PUBLIC Type Identifier PARENT_ESQ MethodInpDecl PARENT_DIR CURLY_ESQ MethodVarDecl MethodStatement K_RETURN Expression PONTOVIRGULA CURLY_DIR 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-11)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-10)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-8)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String ex = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = "public "+t+" "+i+"("+m+"){"+v+" "+s+" returns "+ex+";}\n"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MethodDeclaration",4, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-12)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // VarDeclaration ::= Type Identifier PONTOVIRGULA 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = t+" "+i+";\n"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("VarDeclaration",3, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ClassMethods ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ClassMethods ::= MethodDeclaration ClassMethods 
            {
              String RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String m = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = m+" "+c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ClassMethods",22, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ClassVariables ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ClassVariables",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // ClassVariables ::= VarDeclaration ClassVariables 
            {
              String RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String v = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = v+" "+c; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ClassVariables",21, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Extend ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Extend",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Extend ::= K_EXTENDS Identifier 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		 RESULT = "extends ".concat(i); 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Extend",20, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ClassDeclaration ::= 
            {
              String RESULT =null;
		 RESULT = ""; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // ClassDeclaration ::= ClassDeclaration K_CLASS Identifier Extend CURLY_ESQ ClassVariables ClassMethods CURLY_DIR 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).right;
		String e = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-4)).value;
		int cvleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int cvright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String cv = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		int cmleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int cmright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String cm = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		 RESULT = c+" class "+i+" "+e+"{"+cv+" "+cm+"}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("ClassDeclaration",2, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-7)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // MainClass ::= K_CLASS Identifier CURLY_ESQ K_PUBLIC K_STATIC T_VOID K_MAIN PARENT_ESQ T_STRING COLCHE_ESQ COLCHE_DIR Identifier PARENT_DIR CURLY_ESQ Statement CURLY_DIR CURLY_DIR 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-15)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-15)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-15)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).right;
		String i2 = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-5)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).left;
		int stright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).right;
		String st = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-2)).value;
		 RESULT = "class "+i+" { public static void main ( String [] "+i2+"){ "+st+"}}"; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("MainClass",1, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-16)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Goal ::= MainClass ClassDeclaration 
            {
              String RESULT =null;
		int mcleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int mcright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String mc = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		int cdleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()).right;
		String cd = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.peek()).value;
		mc+=cd; System.out.print(mc);; 
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("Goal",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          return CUP$ParserCup$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= Goal EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)).value;
		RESULT = start_val;
              CUP$ParserCup$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserCup$stack.elementAt(CUP$ParserCup$top-1)), ((java_cup.runtime.Symbol)CUP$ParserCup$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserCup$parser.done_parsing();
          return CUP$ParserCup$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

